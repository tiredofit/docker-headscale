#!/command/with-contenv bash

bootstrap_filesystem() {
    if [ ! -d "${CONFIG_PATH}" ]; then
        mkdir -p "${CONFIG_PATH}"
    fi
    if [ "$(stat -c %U "${CONFIG_PATH}")" != "headscale" ] ; then chown -R headscale:headscale "${CONFIG_PATH}" ; fi

    if [ ! -d "/etc/headscale" ]; then
        mkdir -p /etc/headscale
    fi
    if [ "$(stat -c %U "/etc/headscale")" != "headscale" ] ; then chown -R headscale:headscale "/etc/headscale" ; fi

    if [ ! -d "${DATA_PATH}" ]; then
        mkdir -p "${DATA_PATH}"
    fi
    if [ "$(stat -c %U "${DATA_PATH}")" != "headscale" ] ; then chown headscale:headscale "${DATA_PATH}" ; fi

    if [ ! -d "${LOG_PATH}" ]; then
        mkdir -p "${LOG_PATH}"
    fi
    if [ "$(stat -c %U "${LOG_PATH}")" != "headscale" ] ; then chown -R headscale:headscale "${LOG_PATH}" ; fi

    if [ ! -d "${SOCKET_PATH}" ]; then
        mkdir -p "${SOCKET_PATH}"
    fi
    if [ "$(stat -c %U "${SOCKET_PATH}")" != "headscale" ] ; then chown -R headscale:headscale "${SOCKET_PATH}" ; fi
}

configure_server() {
    case "${LOG_TYPE,,}" in
        file )
            create_logrotate headscale_server "${LOG_PATH}"/"${LOG_FILE}" headscale headscale
        ;;
    esac

    if [ "${SETUP_TYPE,,}" = "auto" ]; then
        if [ ! -f "${CONFIG_PATH}"/"${CONFIG_FILE}" ] ; then
            sudo -u headscale cp -R /assets/headscale/config-example.yaml "${CONFIG_PATH}"/"${CONFIG_FILE}"
        fi

        if [ ! -f "/etc/headscale/config.yaml" ] ; then
            ln -sf "${CONFIG_PATH}"/"${CONFIG_FILE}" /etc/headscale/config.yaml
        fi

        sanity_var SERVER_URL "URL that clients connect to eg https://headscale.domain.com"
        sudo -u headscale yq -i '
                                    .server_url = "'$(echo ${SERVER_URL})'" |
                                    .listen_addr = "'$(echo ${LISTEN_IP}:${LISTEN_PORT})'" |
                                    .metrics_listen_addr = "'$(echo ${METRICS_LISTEN_IP}:${METRICS_LISTEN_PORT})'" |
                                    .grpc_listen_addr = "'$(echo ${GRPC_LISTEN_IP}:${GRPC_LISTEN_PORT})'" |
                                    .private_key_path = "'$(echo ${DATA_PATH}/${PRIVATE_KEY_FILE})'" |
                                    .noise.private_key_path = "'$(echo ${DATA_PATH}/${NOISE_PRIVATE_KEY_FILE})'" |
                                    .unix_socket = "'$(echo ${SOCKET_PATH}/${SOCKET_FILE})'" |
                                    .unix_socket_permission = "'$(echo ${SOCKET_PERMISSION})'" |
                                    .log.format = "'$(echo ${LOG_FORMAT})'" |
                                    .log.level = "'$(echo ${LOG_LEVEL})'"
                                ' "${CONFIG_PATH}"/"${CONFIG_FILE}"

        case "${DB_TYPE,,}" in
            postgres* )
                transform_file_var \
                                    DB_USER \
                                    DB_PASS \
                                    DB_HOST \
                                    DB_PORT \
                                    DB_NAME
                sanity_var DB_USER "DB Username for Headscale"
                sanity_var DB_PASS "DB Password for Headscale"
                sanity_var DB_HOST "DB Host for Headscale"
                sanity_var DB_NAME "DB Name for Headscale"
                counter=0
                export PGPASSWORD=${DB_PASS}
                until pg_isready --dbname="${DB_NAME}" --host="${DB_HOST}" --port="${DB_PORT}" --username="${DB_USER}" -q ; do
                    sleep 5
                    (( counter+=5 ))
                    print_warn "Postgres Host '${DB_HOST}' is not accessible, retrying.. ($counter seconds so far)"
                done
                sudo -u headscale yq -i '
                                            .db_type = "postgres" |
                                            .db_host = "'$(echo ${DB_HOST})'" |
                                            .db_port = "'$(echo ${DB_PORT})'" |
                                            .db_name = "'$(echo ${DB_NAME})'" |
                                            .db_user = "'$(echo ${DB_USER})'" |
                                            .db_pass = "'$(echo ${DB_PASS})'"
                                        ' "${CONFIG_PATH}"/"${CONFIG_FILE}"
            ;;
            sqlite* )
                sudo -u headscale yq -i '
                                            .db_type = "sqlite3" |
                                            .db_path = "'$(echo ${DATA_PATH}/${DB_SQLITE_FILE})'"
                                        ' "${CONFIG_PATH}"/"${CONFIG_FILE}"

            ;;
        esac
    fi
}

configure_ui() {
    update_template /etc/nginx/sites.available/headscale-ui.conf \
                                                                        LISTEN_PORT
}

setup_container_mode() {
    if [ -f "/tmp/.container/toi_hs/CONTAINER_MODE" ]; then
        print_debug "Importing MODE environment generated variables"
        source /tmp/.container/toi_hs/CONTAINER_MODE
    else
        mkdir -p /tmp/.container/toi_hs/
        modes=$(echo "${MODE}" | tr "," "\n")
        for mode in $modes ; do
            case "${mode,,}" in
                "server" )
                    print_debug "Enabling Container Mode for: SERVER"
                    echo "ENABLE_SERVER=TRUE" >> /tmp/.container/toi_hs/CONTAINER_MODE
                ;;
                "standalone" | "manual" )
                    print_debug "Enabling Container Mode for: STANDALONE"
                    echo "ENABLE_STANDALONE=TRUE" >> /tmp/.container/toi_hs/CONTAINER_MODE
                ;;
                *)
                    print_error "Unknown 'MODE' environment variable - exitting.."
                    exit 1
                ;;
            esac
        done
        source /tmp/.container/toi_hs/CONTAINER_MODE
    fi
}
